name: arm-linux-gnueabihf

on:
  push:
    branches:
      - fix-arm-mihup
    paths:
      - '.github/workflows/arm-linux-gnueabihf.yaml'
  # pull_request:
  #   branches:
  #     - master
  #   paths:
  #     - '.github/workflows/arm-linux-gnueabihf.yaml'
  workflow_dispatch:
    inputs:
      version:
        description: "Version information（e.g., 1.17.3）"
        required: true

permissions:
  contents: write

env:
  ONNXRUNTIME_VERSION:
    |- # Enter release tag name or version name in workflow_dispatch. Appropriate version if not specified
    ${{ github.event.release.tag_name || github.event.inputs.version || '1.17.3' }}

jobs:
  arm_linux_gnueabihf:
    name: Build onnxruntime lib for arm32 on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache build result for ${{ env.ONNXRUNTIME_VERSION }}
        id: cache-build-result
        uses: actions/cache@v2
        with:
          path: onnxruntime-linux-arm-${{ env.ONNXRUNTIME_VERSION }}
          key: onnxruntime-arm-linux-${{ env.ONNXRUNTIME_VERSION }}-cache-v2

      - name: Checkout
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: "debasish-mihup/onnxruntime"
          submodules: true
          ref: v${{ env.ONNXRUNTIME_VERSION }}


      - name: cache-toolchain
        id: cache-toolchain
        uses: actions/cache@v3
        with:
          path: toolchain
          key: gcc-linaro-5.5.0-2017.10-x86_64_arm-linux-gnueabihf.tar.xz

      - name: Download toolchain
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        shell: bash
        run: |
          wget https://annotation.mihup.com/mount1/DATA/AUDIO_FILES/debasish/gcc-linaro-5.5.0-2017.10-x86_64_arm-linux-gnueabihf.tar.xz --no-check-certificate
          mkdir $GITHUB_WORKSPACE/toolchain
          echo "Unzipping linaro toolchain"
          ls -lh
          tar xvf ./gcc-linaro-5.5.0-2017.10-x86_64_arm-linux-gnueabihf.tar.xz --strip-components 1 -C $GITHUB_WORKSPACE/toolchain

      - name: Download protoc
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          # see ./cmake/deps.txt
          if [[ ${{ env.ONNXRUNTIME_VERSION }} =~ 1.14.[0-9] ]]; then
            wget https://github.com/protocolbuffers/protobuf/releases/download/v3.20.3/protoc-3.20.3-linux-x86_64.zip
            unzip protoc-3.20.3-linux-x86_64.zip
          elif [[ ${{ env.ONNXRUNTIME_VERSION }} =~ 1.1[567].[0-9] ]]; then
            wget https://github.com/protocolbuffers/protobuf/releases/download/v21.12/protoc-21.12-linux-x86_64.zip
            unzip protoc-21.12-linux-x86_64.zip
          else
            echo "Unsupported version ${{ env.ONNXRUNTIME_VERSION }}"
            exit 1
          fi

          ./bin/protoc --version

      - name: Set environment variable
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          echo "$GITHUB_WORKSPACE/toolchain/bin"  >> "$GITHUB_PATH"
          echo "$GITHUB_WORKSPACE/bin"  >> "$GITHUB_PATH"
          ls -lh "$GITHUB_WORKSPACE/toolchain/bin"

          echo "CC=arm-linux-gnueabihf-gcc" >> "$GITHUB_ENV"
          echo "CXX=arm-linux-gnueabihf-g++" >> "$GITHUB_ENV"

      - name: Display toolchain info
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          arm-linux-gnueabihf-gcc --version

      - name: Display protoc info for ${{ env.ONNXRUNTIME_VERSION }}
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          protoc --version

      - name: Show current directory
        shell: bash
        run: |
          ls -lh
          echo $PWD

      - name: Install dependencies
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install python3 git-lfs
          python3 -m pip install cmake
          cmake --version
          python3 -m pip install flatbuffers

      - name: apply patch
        shell: bash
        run: |
          cd tools/ci_build
          sed -i.bak s/-fcf-protection// ./build.py

          cd ../..

          version=${{ env.ONNXRUNTIME_VERSION }}
          which python
          v=$(cat ./VERSION_NUMBER)
          if [[ $v == "1.18.0" ]]; then
            echo $version > ./VERSION_NUMBER
            sed -i.bak s/1.18.0/$version/g ./onnxruntime/core/session/onnxruntime_c_api.cc
          fi

          echo "---$version---"
          cat ./VERSION_NUMBER
          echo "---"

          git diff

      - name: Build onnxruntime for 32-bit ARM
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          build_dir=./build-arm

          python3 ./tools/ci_build/build.py \
            --compile_no_warning_as_error \
            --build_dir $build_dir \
            --config Release \
            --build \
            --build_shared_lib \
            --arm \
            --update \
            --path_to_protoc_exe $GITHUB_WORKSPACE/bin/protoc \
            --cmake_extra_defines onnxruntime_BUILD_UNIT_TESTS=OFF \
            --cmake_extra_defines CMAKE_INSTALL_PREFIX=$build_dir/install/ \
            --cmake_extra_defines CMAKE_SYSTEM_NAME=Linux \
            --cmake_extra_defines CMAKE_SYSTEM_PROCESSOR=armv7l \
            --cmake_extra_defines CMAKE_C_COMPILER_FORCED=1 \
            --cmake_extra_defines CMAKE_CXX_COMPILER_FORCED=1 \
            --target install \
            --parallel \
            --skip_tests

      - name: Display build results
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          tree ./build-arm

      - name: Collect results
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        shell: bash
        run: |
          build_dir=./build-arm
          version=${{ env.ONNXRUNTIME_VERSION }}

          ./tools/ci_build/github/linux/copy_strip_binary.sh \
            -r $build_dir \
            -a onnxruntime-linux-arm-$version \
            -c Release \
            -l libonnxruntime.so.$version \
            -s $PWD/ \
            -t "$(git rev-parse HEAD)"

          ls -lh $build_dir/onnxruntime-linux-arm-$version

          mv $build_dir/onnxruntime-linux-arm-$version .

          tree ./onnxruntime-linux-arm-$version/

          cp -v ./include/onnxruntime/core/session/onnxruntime_float16.h ./onnxruntime-linux-arm-$version/include

          zip -r onnxruntime-linux-arm-${version}.zip ./onnxruntime-linux-arm-$version/

      - name: Upload v${{ env.ONNXRUNTIME_VERSION }}
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        uses: svenstaro/upload-release-action@v2
        with:
          file_glob: true
          file: "./*.zip"
          overwrite: true
          tag: v${{ env.ONNXRUNTIME_VERSION }}


      - name: Upload artifact
        if: steps.cache-build-result.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v2
        with:
          name: onnxruntime-linux-arm-${{ env.ONNXRUNTIME_VERSION }}
          path: onnxruntime-linux-arm-${{ env.ONNXRUNTIME_VERSION }}
